from FreeCAD import ActiveDocument as doc, Rotation, Vector, Placement
from finger import Finger, Row
import FreeCAD as App
import FreeCADGui as Gui
import finger
import utils

# This is needed for development since FreeCAD uses cached version of library.
import importlib
importlib.reload(finger)
importlib.reload(utils)

utils.clear_report()
# utils.remove_all(doc)

utils.remove_clones(doc, 'print', all=True)
utils.remove_clones(doc, 'surfjoin', all=True)
utils.remove_clones(doc, 'surf', all=True)
utils.remove_clones(doc, 'cone', all=True)
utils.remove_clones(doc, 'Fusion')

KEY_HEIGHT = -13.8


def add_key():
    key = doc.copyObject(doc.getObjectsByLabel("key")[0])
    key.ViewObject.Visibility = True
    return key


def draw_hand(fingers):
    """ Goes through finger and draws the keys."""
    for f in fingers:
        merge = []
        prev_key = None
        surfs = []
        for i, _ in enumerate(f.rows):
            v, rot = f.get_pos(i, draw=True)
            key = add_key()
            # Used to rotate and position at top of box.
            center_v = Vector(0, 0, KEY_HEIGHT)  # key.Shape.BoundBox.ZMin)
            key.Placement = Placement(v - center_v,
                                      rot.multiply(
                                          Rotation(finger.X_AXIS, 180)),
                                      center_v)
            doc.recompute()

            if prev_key:
                surface = doc.addObject('Part::RuledSurface', 'surf')
                surface.Curve1 = (prev_key, ['Edge258'])
                surface.Curve2 = (key, ['Edge262'])
                # TODO: extrude doc.Spreadsheet.BaseWidth
                surfs.append(surface)
                doc.recompute()
            prev_key = key
            merge.append(key)

        for surf in surfs:
            f = doc.addObject('Part::Extrusion', 'surfjoin')
            f.Base = surf
            f.Solid = True
            f.DirMode = "Custom"
            f.Dir = Vector(-1, 0, 0)
            f.LengthFwd = doc.Spreadsheet.BaseWidth
            merge.append(f)
            doc.recompute()

        # Fuse and select for printing.
        pr = doc.addObject("Part::MultiFuse", "print001")
        pr.Shapes = merge
        doc.recompute()
        print(pr.TypeId)
        Gui.Selection.addSelection(pr)


hand = []

# # Pinky
# hand.append(
#     Finger(
#         segments=Finger.generate_segments([40, 20, 20]),
#         rows=generate_finger_rows(Vector(), [[15, 45, 45]]),
#     )
# )

# # Ring finger
# hand.append(
#     Finger(
#         segments=Finger.generate_segments([50, 28, 22]),
#         rows=generate_finger_rows(Vector(25, 3, 0), [[10, 70, 10]]),
#     )
# )

# # Middle finger
# hand.append(
#     Finger(
#         segments=Finger.generate_segments([60, 30, 25]),
#         rows=generate_finger_rows(Vector(47, 8, 0), [[0, 0, 0], [15, 60, 10]]),
#     ))

# Index finger
hand.append(
    Finger()
    .generate_segments([55, 25, 20])
    .add_rows(Vector(70, 8, 0),
              [([15, 14, 14], 40),
               ([15, 27, 27], 5),
               ([16, 45, 45], -15)])
)

# Index finger - secondary position
# i_rot=Rotation(finger.Z_AXIS, -20)
# # Side rotation
# i_rot_2=i_rot.multiply(Rotation(finger.X_AXIS, -5))
# i_rot_3=i_rot.multiply(Rotation(finger.X_AXIS, -20))
# i_rot_4=i_rot.multiply(Rotation(finger.X_AXIS, -40))
# fingers.append(
#     Finger(
#         color=(0.2, 0.2, 0.8),
#         segments=Finger.get_vecs([55, 25, 20]),
#         rows=[Row(resting=Row.get_mods([i_rot, 0, 5],
#                                        [Vector(40, 25, 0)])),
#               Row(resting=Row.get_mods([i_rot_2, 15, 15],
#                                        [Vector(40, 25, 0)])),
#               Row(resting=Row.get_mods([i_rot_3, 45, 25],
#                                        [Vector(40, 25, 0)])),
#               Row(resting=Row.get_mods([i_rot_4, 90, 45],
#                                        [Vector(40, 25, 0)]))]
#     ))

draw_hand(hand)
